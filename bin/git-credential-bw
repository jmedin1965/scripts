#!/usr/bin/bash

# REF: https://github.com/AZMCode/git-credential-bw-shell/blob/master/git-credential-bw
#
#

trap 'exit 1' SIGINT
help(){
	echo "
Bitwarden Git Credential Helper

Usage:
  git-credential-bw get
  git-credential-bw [-h|--help]

Options:
  -h --help     Show this screen."
}
get(){
	# You can configure these settings

	#Path to temporarily store the bitwarden session key.
	#Recommended to put in a temp folder.
	#Note that this session key can be invalidated at any moment by running 'bw lock'
    if [ -d /run/user/1000 ]
    then
        declare -r sessionFilePath="/run/user/1000/git-credential-bw.key"
    else
	    declare -r sessionFilePath="/tmp/git-credential-bw.key"
    fi

	#String to give to bw to search the correct item
	declare -r itemSearchString="github.com"

	#Max number of times to prompt the user before failing.
	#-1 makes this limit infinite
	declare -r maxAttempts=3

    if [ -x /usr/local/bin/bw ]
    then
        declare -r bw="/usr/local/bin/bw"

    elif [ -x /usr/bin/bw ]
    then
        declare -r bw="/usr/bin/bw"
    else
        declare -r bw="bw"
    fi

	logInStatus(){
		declare bwReturn="$($bw status)"
		declare statusObj="$(echo $bwReturn | grep -oP "{.*" )"
		declare statusString="$(echo $statusObj | jq -r .status)"
		echo $statusString
	}

	if [ ! -f "$sessionFilePath" ]; then
		touch "$sessionFilePath"
	fi
	export BW_SESSION="$(cat "$sessionFilePath")"

	declare attemptNum=0
	declare currStatus="$(logInStatus)"
	while [ "$currStatus" != "unlocked" ] && [ $attemptNum -ne $maxAttempts ]; do
		case "$currStatus" in
			"locked")
				echo "Your Bitwarden vault is locked, please unlock ($((attemptNum + 1))/$maxAttempts): " >&2
				export BW_SESSION="$($bw unlock --raw < /dev/tty)"
				;;
			"unlocked")
				;;
			"unauthenticated")
				echo "You're not logged into Bitwarden, please log in ($((attemptNum + 1))/$maxAttempts):" >&2
				export BW_SESSION="$($bw login --raw < /dev/tty)"
				;;
		esac
		currStatus="$(logInStatus)"
		if [ "$attemptNum" -ne -1 ]; then
			attemptNum=$((attemptNum + 1))
		fi
	done

	if [ "$currStatus" != "unlocked" ]; then
		echo "Could not authenticate" >&2
		exit 1
	fi

	$bw sync > /dev/null
	echo "$BW_SESSION" > "$sessionFilePath"

	if [ "$1" == "raw" ]; then
		echo "$BW_SESSION"
	else
		declare item="$($bw get item "$itemSearchString")"
		declare loginOut="$(echo $item | jq .login)"
		declare username="$(echo $loginOut | jq -r .username)"
		declare password="$(echo $loginOut | jq -r .password)"
        declare fine_grained_key="$(echo $item | jq -r '.fields[] | select(.name=="fine grained token")')"
        declare fine_grained_key="$(echo $fine_grained_key | jq -r .value )"
        [ -n "$fine_grained_key" ] && password="$fine_grained_key"
		echo "username=$username"
		echo "password=$password"
	fi
}


if [ "$#" -eq 0 ]; then
	help;
	exit;
else
	declare isRaw=false
	declare isHelp=false
	declare command
	while [ $# -gt 0 ]; do
		case "$1" in
			-h|--help)
				isHelp=true
				exit
				;;
			-r|--raw)
				isRaw=true
				;;
			*)
				if [ -z "$(echo "$1" | grep -o "-")" ]; then
					if [ -z "$command" ]; then
						command="$1"
					else
						echo "Unknown Argument $1" >&2
						exit 1
					fi
				else
					echo "Unknown Argument $1" >&2
					exit 1
				fi
				;;
		esac
		shift
	done
	if $isHelp; then
		help
		exit
	elif [ -n "$command" ]; then
		case "$command" in
			get)
				get
				exit $?
				;;
			*)
				exit 1
		esac
	fi
fi

