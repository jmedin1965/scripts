#!/usr/bin/bash

# REF: https://github.com/AZMCode/git-credential-bw-shell/blob/master/git-credential-bw
#
#

# what section to store options in the git config
declare -r  section="credential.bw"

trap 'exit 1' SIGINT
help(){
	echo "
Bitwarden Git Credential Helper

Usage:
  git-credential-bw <command>
  git-credential-bw [-h|--help]

Options:
  -h --help     Show this screen.

Command:
  get  - get the credentials username and password.
  set  - set required options.
    itemSearchString - string to search bitwarden for and must find only one item.
    maxAttempts      - Max number of times to prompt the user before failing.
                       -1 makes this limit infinite..
    bw               - bitwarden cli command to use.
    custom-field     - custom field to use instead of password
    sessionFilePath  - Path to temporarily store the bitwarden session key.
                       Recommended to put in a temp folder.
                       Note that this session key can be invalidated at any moment by running 'bw lock'.
                       if unset, use keyctl instead.

Current Options:
  itemSearchString - $(get_git_config "itemSearchString")
  maxAttempts      - $(get_git_config "maxAttempts")
  bw               - $(get_git_config "bw")
  custom-field     - $(get_git_config "custom-field")
  sessionFilePath  - $(get_git_config "sessionFilePath")
" >&2
}

get_git_config()
{
    local data=""

    if [ -n "$1" ]
    then
        data="$(git config "${section}.${1}")"
        if [ -z "$data" -a -n "$2" ]
        then
            git config --global ${section}.${1} "$2" && data="$2"
        fi
    fi

    echo "$data"
}

config_check()
{
    if [ -n "$1" -a -z "$2" ]
    then
        echo "
error: no value for ${section}.${1}. Please set a \"value\" as follows
git config ${section}.${1} \"value\"
git config --global ${section}.${1} \"value\"
" >&2
        exit 1
    fi
}

get()
{
	# You can configure these settings

	#Path to temporarily store the bitwarden session key.
	#Recommended to put in a temp folder.
	#Note that this session key can be invalidated at any moment by running 'bw lock'
    declare -r sessionFilePath="$(get_git_config "sessionFilePath" "")"
    #if [ -d /run/user/1000 ]
    #then
    #    declare -r sessionFilePath="/run/user/1000/git-credential-bw.key"
    #else
	#    declare -r sessionFilePath="/tmp/git-credential-bw.key"
    #fi

	#String to give to bw to search the correct item
	#declare -r itemSearchString="github.com"
    declare -r itemSearchString="$(get_git_config "itemSearchString")"
    config_check "itemSearchString" "$itemSearchString"

	#Max number of times to prompt the user before failing.
	#-1 makes this limit infinite
	#declare -r maxAttempts=3
    declare -r maxAttempts="$(get_git_config "maxAttempts" 3)"
    config_check "maxAttempts" "$maxAttempts"

    # the bitwarded cli program to use
    declare -r bw="$(get_git_config "bw" bw)"

    # what custom field the password is in. If not set, use password field instead
    declare -r custom_field="$(get_git_config "custom-field")"

    # check if we have 

	logInStatus(){
		declare bwReturn="$($bw status)"
		declare statusObj="$(echo $bwReturn | grep -oP "{.*" )"
		declare statusString="$(echo $statusObj | jq -r .status)"
		echo $statusString
	}

    # read saved key
	if [ -n "$sessionFilePath" ]
    then
        if [ ! -f "$sessionFilePath" ]
        then
		    touch "$sessionFilePath"
        fi
	    export BW_SESSION="$(cat "$sessionFilePath")"
    else
        if ! which -s keyctl
        then
            error "
keyctl: command not found. Either install it or set sessionFilePath
to store session key to a file, as follows:
git config ${section}.sessionFilePath \"value\"
git config --global ${section}.sessionFilePath \"value\"
" >&2
        else
            export BW_SESSION="$( id=$(keyctl request user "BW_SESSION" @u 2>/dev/null) \
                && keyctl print "$id")"
        fi
	fi

	declare attemptNum=0
	declare currStatus="$(logInStatus)"
	while [ "$currStatus" != "unlocked" ] && [ $attemptNum -ne $maxAttempts ]; do
		case "$currStatus" in
			"locked")
				echo "Your Bitwarden vault is locked, please unlock ($((attemptNum + 1))/$maxAttempts): " >&2
				export BW_SESSION="$($bw unlock --raw < /dev/tty)"
				;;
			"unlocked")
				;;
			"unauthenticated")
				echo "You're not logged into Bitwarden, please log in ($((attemptNum + 1))/$maxAttempts):" >&2
				export BW_SESSION="$($bw login --raw < /dev/tty)"
				;;
		esac
		currStatus="$(logInStatus)"
		if [ "$attemptNum" -ne -1 ]; then
			attemptNum=$((attemptNum + 1))
		fi
	done

	if [ "$currStatus" != "unlocked" ]; then
		echo "Could not authenticate" >&2
		exit 1
	fi

	$bw sync > /dev/null
    # save key
	if [ -n "$sessionFilePath" ]
    then
	    echo "$BW_SESSION" > "$sessionFilePath"
    else
        echo -n "$BW_SESSION" | keyctl padd user "BW_SESSION" @u > /dev/null
    fi

	if [ "$1" == "raw" ]; then
		echo "$BW_SESSION"
	else
		declare item="$($bw get item "$itemSearchString")"
		declare loginOut="$(echo $item | jq .login)"
		declare username="$(echo $loginOut | jq -r .username)"
		declare password="$(echo $loginOut | jq -r .password)"
        if [ -n "$custom_field" ]
        then
            #declare fine_grained_key="$(echo $item | jq -r '.fields[] | select(.name=="fine grained token")')"
            declare fine_grained_key="$(echo $item | jq -r ".fields[] | select(.name==\"$custom_field\")")"
            declare fine_grained_key="$(echo $fine_grained_key | jq -r .value )"
            [ -n "$fine_grained_key" ] && password="$fine_grained_key"
        fi
		echo "username=$username"
		echo "password=$password"
	fi
}

set()
{
    if [ -n "$1" -a -n "$2" ]
    then
        git config --global "credential.bw.$1" "$2"
    else
        help
        echo "please provive an option and a value to set it to." >&2
    fi
}

init()
{
    git config --global credential.helper bw \
        && echo "git-credential-bw is now set to be the credential manager." >&2 \
        && echo "Please set required options now." >&2
    help
}

error()
{
    echo "$@" >&2
    help
    exit 1
}

if [ "$#" -eq 0 ]; then
	help;
	exit;
else
	declare isRaw=false
	declare isHelp=false
	declare command
	while [ $# -gt 0 -a -z "$command" ]; do
		case "$1" in
			-h|--help)
				isHelp=true
				break
				;;
			-r|--raw)
				isRaw=true
				;;
			-*)
                error "$1: Unknown option"
                ;;
            *)
                command="$1"
				;;
		esac
		shift
	done
	if $isHelp; then
		help
	elif [ -n "$command" ]; then
		case "$command" in
			get)
				get
				exit $?
				;;
            init)
                init
                exit $?
                ;;
            set)
                set "$@"
                exit $?
                ;;
			*)
                error "$command: unknown command"
                ;;
		esac
    else
        help
        exit
	fi
fi

