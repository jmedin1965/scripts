#!/bin/bash
#
# Make sure updxlrator is patched/fixed
#

patch()
{
	local from="$1"
	local to="$2"
	local file="$3"

	local num

	(( patch_count++ ))

	if [ -e "$file" ]
	then
		echo "$file: file exists, checking for pattern \"$from\"...."
	else
		echo "$file: file does not exist"
		return 1
	fi

	num="$(/bin/grep -c -e "$from" "$file")"

	if [ "$num" -gt 0 ]
	then
		(( patch_yes++ ))
		echo "  pattern matched $num times, patching....."

		/bin/sed -i.bak -e "s/$from/$to/g" "$file"
		if [ $? == 0 ]
		then
			echo "  patch suceeded, created backup file $file.bak"

			# if patch applied, return 0
			return 0
		else
			(( patch_fail++ ))
			echo "  patch failed."
		fi
	else
		echo "  no match, skipping patch."
		(( patch_no++ ))
	fi
	
	# if patch not applied return 1
	return 1
}

patch_start()
{
	patch_count="0"
	patch_yes="0"
	patch_no="0"
	patch_fail="0"
}

patch_end()
{
	echo "patched $patch_yes pattern(s) of $patch_count total, with $patch_fail failure(s)."

	return $(( patch_yes + patch_fail ))
}

EV="0"

patch_start

patch '|deb|rpm)' '|deb|udeb|rpm\)' "/usr/sbin/updxlrator"

patch_end

EV="$?"

if [ -e /var/ipfire/proxy/settings ]
then
	eval $(/usr/local/bin/readhash /var/ipfire/proxy/settings)
	
	monit_updxlrator="$(/usr/bin/monit -B status updxlrator | /bin/fgrep -c "Not monitored")"
	if [ "$ENABLE_UPDXLRATOR" == "on" ]
	then
		echo "Updxlrator is enabled"
		if [ "$monit_updxlrator" -gt 0 ]
		then
			/usr/bin/monit monitor updxlrator
		fi
		if [ "$EV" != "0" ]
		then
			/etc/init.d/squid restart 2>&1
			echo "restarted squid."
		fi
	else
		echo "Updxlrator is disabled"
		if [ "$monit_updxlrator" == "0" ]
		then
			/usr/bin/monit unmonitor updxlrator
		fi
	fi
fi


exit "$EV"

